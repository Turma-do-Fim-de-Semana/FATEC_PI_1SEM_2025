-- Ativar extensão para gerar UUIDs automaticamente
create extension if not exists "uuid-ossp";

-- Tabela de perfis (dados básicos de todos os usuários autenticados)
create table profiles (
  id uuid primary key references auth.users(id) on delete cascade,
  full_name text not null,
  is_provider boolean default false, -- true = profissional, false = usuário comum
  created_at timestamp with time zone default now()
);

-- Tabela de categorias/setores (ex: pedreiro, pintor)
create table categories (
  id uuid primary key default uuid_generate_v4(),
  name text not null unique
);

-- Tabela de dados de prestadores de serviço
create table providers (
  id uuid primary key references auth.users(id) on delete cascade,
  category_id uuid references categories(id) on delete set null,
  phone text,
  email text,
  description text,
  location text,
  created_at timestamp with time zone default now()
);

-- Tabela de avaliações dos profissionais
create table ratings (
  id uuid primary key default uuid_generate_v4(),
  provider_id uuid references providers(id) on delete cascade,
  user_id uuid references auth.users(id) on delete cascade,
  rating integer not null check (rating >= 1 and rating <= 5),
  comment text,
  created_at timestamp with time zone default now()
);

-- tabelas v2

-- Create the Category table
CREATE TABLE Category (
    id UUID PRIMARY KEY,
    description VARCHAR(255) NOT NULL
);

-- Create the Client table
CREATE TABLE Client (
    id UUID PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    created_at DATE,
    updated_at DATE
);

-- Create the Professional table
CREATE TABLE Professional (
    id UUID PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    phone VARCHAR(20),
    email VARCHAR(255) UNIQUE NOT NULL,
    description TEXT,
    city VARCHAR(100),
    image TEXT,  -- stores the image URL or path
    category_id UUID,
    schedule VARCHAR(255),
    created_at DATE,
    updated_at DATE,
    CONSTRAINT fk_category FOREIGN KEY (category_id) REFERENCES Category(id)
);

-- Create the Review table
CREATE TABLE Review (
    id UUID PRIMARY KEY,
    rating DOUBLE PRECISION NOT NULL,
    comment TEXT,
    professional_id UUID NOT NULL,
    client_id UUID NOT NULL,
    created_at DATE,
    CONSTRAINT fk_review_professional FOREIGN KEY (professional_id) REFERENCES Professional(id),
    CONSTRAINT fk_review_client FOREIGN KEY (client_id) REFERENCES Client(id)
);

